tosca_definitions_version: tosca_simple_yaml_1_0

node_types:
  nfv.nodes.VNFD.Firewall:
    derived_from: nfv.nodes.VNFD
  
  nfv.nodes.VNFD.Nat:
    derived_from: nfv.nodes.VNFD
  
  nfv.nodes.VNFD.QoS:
    derived_from: nfv.nodes.VNFD
  
  nfv.nodes.VNFD.SpamVirus:
    derived_from: nfv.nodes.VNFD
  
  nfv.nodes.VNFD.DHCP:
    derived_from: nfv.nodes.VNFD
  
  nfv.nodes.VNFD.DNS:
    derived_from: nfv.nodes.VNFD
  
  nfv.nodes.VNFD.Tshark_analize:
    derived_from: nfv.nodes.VNFD
  
  nfv.nodes.VNFD.Routing:
    derived_from: nfv.nodes.VNFD
    
  nfv.nodes.VNFD.Ntop_analize:
    derived_from: nfv.nodes.VNFD
    
  nfv.nodes.VNFD:
    derived_from: tosca.nodes.Root
    properties:
      vnfdId:
        type: string
        required: false
      vnfProvider:
        type: string
        required: false
      vnfProductName:
        type: string
        required: false
      vnfSoftwareVersion:
        type: string
        required: false
      vnfmInfo:
        type: string
        required: false
      deploymentFlavour:
        type: nfv.datatypes.VNFDf
        required: false
      modifiableAttributes:
        type: nfv.datatypes.VnfInfoModifiableAttributes
        required: false
    requirements:
      - vnfExtCpd:
          capability: nfv.capabilities.vnfExtCpd
          node: nfv.nodes.VnfExtCpd
          relationships: nfv.relationships.vnfExtCpd
          occurrences: [ 1, UNBOUNDED ]
      - vdu:
          capability: nfv.capabilities.vdu
          node: nfv.nodes.VDU
          relationships: nfv.relationships.vdu
          occurrences: [ 1, UNBOUNDED ]
    
  nfv.nodes.VDU:
    derived_from: tosca.nodes.Root
    properties:
      vduId:
        type: string
        required: false
      name:
        type: string
        required: false
      description:
        type: string
        required: false
      virtualComputeDesc:
        type: nfv.datatypes.virtualComputeDesc
        required: true
      virtualStorageDesc:
        type: nfv.datatypes.VirtualStorageDesc
        required: true
      swImageDesc:
        type: nfv.datatypes.VirtualStorageDesc.swImageDesc
        required: false
    capabilities: 
      intCpd:
        type: nfv.capabilities.intCpd
      vduDep:
        type: nfv.capabilities.vdu
        
  nfv.nodes.Cpd:
    derived_from: tosca.nodes.Root
    properties:
      cpdId:
        type: string
        required: false
      layerProtocol: 
        type: string
        default: IPV4
        constraints:
          - valid_values: [ Ethernet, MPLS, ODU2, IPV4, IPV6, Pseudo-Wire ]
      description:
        type: string
        required: false
      addressData:
        type: nfv.datatypes.AddressData
        required: false
        
  nfv.nodes.VnfExtCpd:
    derived_from: nfv.nodes.Cpd
    capabilities:
      vnfExtCpdDep:
        type: nfv.capabilities.vnfExtCpd
    requirements:
      - VDUCpd: 
          capability: nfv.capabilities.intCpd
          node: nfv.nodes.VDUCpd
          relationships: nfv.relationships.intCpd
          occurrences: [ 1, 1 ]
      - intVirtualLinkDesc:
          capability: nfv.capabilities.intVirtualLinkDesc
          node: nfv.nodes.VnfVirtualLinkDesc
          relationships: nfv.relationships.intVirtualLinkDesc
          occurrences: [ 1, 1 ]

  nfv.nodes.VDUCpd:
    derived_from: nfv.nodes.Cpd
    properties:
      virtualNetworkInterfaceRequirements:
        type: nfv.datatypes.VirtualNetworkInterfaceRequirements
        required: false
    requirements:
      - intCpd: 
          capability: nfv.capabilities.intCpd
          node: nfv.nodes.VDU
          relationships: nfv.relationships.intCpd
          occurrences: [ 1, 1 ]
      - intVirtualLinkDesc:
          capability: nfv.capabilities.intVirtualLinkDesc
          node: nfv.nodes.VnfVirtualLinkDesc
          relationships: nfv.relationships.intVirtualLinkDesc
          occurrences: [ 1, 1 ]

  nfv.nodes.VnfVirtualLinkDesc:
    derived_from: tosca.nodes.Root
    properties:
      virtualLinkDescId:
        type: string
        required: false
      connectivityType:
        type: nfv.datatypes.ConnectivityType
        required: true
      VirtualLinkDescFlavour:
        type: nfv.datatypes.VirtualLinkDescFlavour
        required: true
      cidrData:
        type: nfv.datatypes.CidrData
        required: false
      description:
        type: string
        required: false
    capabilities: 
      intVirtualLinkDesc:
        type: nfv.capabilities.intVirtualLinkDesc

data_types:
  nfv.datatypes.virtualComputeDesc.VirtualMemoryData:
    derived_from: tosca.datatypes.Root
    properties:
      virtualMemSize:
        type: scalar-unit.size
        default: 1024 MiB
        
  nfv.datatypes.virtualComputeDesc.VirtualCpuData:
    derived_from: tosca.datatypes.Root
    properties:
      numVirtualCpu:
        type: integer
        default: 1
      cpuArchitecture:
        type: string
        default: x86
        constraints:
          - valid_values: [ x86, x86_64, arm ]
          
  nfv.datatypes.virtualComputeDesc:
    derived_from: tosca.datatypes.Root
    properties:
      virtualComputeDescId:
        type: string
        required: false
      virtualCpu:
        type: nfv.datatypes.VirtualCpuData
        required: true
      virtualMemory:
        type: nfv.datatypes.VirtualMemoryData
        required: true
  
  nfv.datatypes.VirtualStorageDesc.swImageDesc:
    derived_from: tosca.datatypes.Root
    properties:
      id: 
        type: string
        required: false
      version: 
        type: string
        required: true
      checksum: 
        type: string
        required: true
      minDisk: 
        type: scalar-unit.size
        default: 20 GiB
      size:
        type: scalar-unit.size
        required: true
      operatingSystem:
        type: string
        default: cumulus_vx
      swImage:
        type: string
        required: true
      diskFormat:
        type: string
        default: qcow2
        constraints:
          - valid_values: [ aki, ami, ari, iso, qcow2, raw, vdi, vhd, vhdx, vmdk ]
      containerFormat:
        type: string
        default: BARE
      
  nfv.datatypes.VirtualStorageDesc:
    derived_from: tosca.datatypes.Root
    properties:
      id: 
        type: string
        required: false
      typeOfStorage: 
        type: string
        default: object
        constraints:
          - valid_values: [ object, volume ]
      sizeOfStorage:
        type: scalar-unit.size
        default: 50 GiB
        constraints: 
           - in_range: [ 20 GiB, 200 GiB ]
      swImageDesc:
        type: nfv.datatypes.swImageDesc
        required: false
        
  nfv.datatypes.AddressData.L3AddressData:
    derived_from: tosca.datatypes.Root
    properties:
      iPAddressAssignment:
        type: boolean
        default: true
      iPAddress:
        type: string
        required: false
      floatingIpActivated:
        type: boolean
        default: false
      iPAddressType:
        type: string
        default: IPV4
        constraints:
          - valid_values: [ IPV4, IPV6 ]
      numberOfIpAddress:
        type: integer
        default: 1
          
  nfv.datatypes.AddressData.L2AddressData:
    properties:
      MaCAddressAssignment:
        type: boolean
        default: true
      MaCAddress:
        type: string
        required: false
          
  nfv.datatypes.AddressData:
    derived_from: tosca.datatypes.Root
    properties:
      addressType: 
        type: string
        required: true
        constraints:
          - valid_values: [ IP, MAC ] # как сделать так чтобы при mac - l2 required true, при ip - l3?
      l2AddressData:
        type: nfv.datatypes.L2AddressData
        required: false
      l3AddressData:
        type: nfv.datatypes.L3AddressData
        required: false
        
  nfv.datatypes.CidrData: # не каноничный тип, использовать не обязательно, если не указан, генерируем рандомно!!!
    derived_from: tosca.datatypes.Root
    properties:
      network_name:
        type: string
        required: false
      cidr:
        type: string
        required: false
      start_ip:
        type: string
        required: false
      end_ip:
        type: string
        required: false
      gateway_ip:
        type: string
        required: false
      network_type:
        type: string
        default: geneve
        constraints:
          - valid_values: [ geneve, VLAN ]
        
  nfv.datatypes.VirtualNetworkInterfaceRequirements:
    derived_from: tosca.datatypes.Root
    properties: 
      name: 
        type: string
        required: false
      supportMandatory:
        type: boolean
        default: true
      requirement:
        type: string
        required: true
  
  nfv.datatypes.VnfInfoModifiableAttributes:
    derived_from: tosca.datatypes.Root
    properties:
      extension: 
        type: string # придумать что тут должно быть?
        required: false
      metadata:
        type: string
        required: false
        
  nfv.datatypes.ConnectivityType:
    derived_from: tosca.datatypes.Root
    properties:
      layerProtocol: 
        type: string
        default: IPV4
        constraints:
          - valid_values: [ Ethernet, MPLS, ODU2, IPV4, IPV6, Pseudo-Wire ]
          
  nfv.datatypes.VirtualLinkDescFlavour:
    derived_from: tosca.datatypes.Root
    properties:
      flavourId: 
        type: string
        required: false
    
  nfv.datatypes.VNFDf.vduProfile:
    derived_from: tosca.datatypes.Root
    properties:
      vduId:
        type: string
        required: false
      minNumberOfInstances:
        type: integer
        default: 1
      maxNumberOfInstances:
        type: integer
        default: 1
  
  nfv.datatypes.VNFDf.instantiationLevel:
    derived_from: tosca.datatypes.Root
    properties:
      levelId:
        type: string
        required: false
      description:
        type: string
        required: false
      numberOfInstances:
        type: integer
        default: 1
  
  nfv.datatypes.VNFDf.vnfLcmOperationsConfiguration.instantiateVnfOpConfig:
    derived_from: tosca.datatypes.Root
    properties:
      parameter: 
        type: string
        required: false

  nfv.datatypes.VNFDf.vnfLcmOperationsConfiguration.terminateVnfOpConfig:
    derived_from: tosca.datatypes.Root
    properties:
      parameter: 
        type: string
        required: false
      minGracefulTerminationTimeout:
        type: integer
        default: 100
      maxRecommendedGracefulTerminationTimeout:
        type: integer
        default: 100
        
  nfv.datatypes.VNFDf.vnfLcmOperationsConfiguration.operateVnfOpConfig:
    derived_from: tosca.datatypes.Root
    properties:
      parameter: 
        type: string
        required: false
      minGracefulStopTimeout:
        type: integer
        default: 100
      maxRecommendedGracefulStopTimeout:
        type: integer
        default: 100
  
  nfv.datatypes.VNFDf.vnfLcmOperationsConfiguration:
    derived_from: tosca.datatypes.Root
    properties:
      instantiateVnfOpConfig:
        type: nfv.datatypes.instantiateVnfOpConfig
        required: false
      terminateVnfOpConfig:
        type: nfv.datatypes.terminateVnfOpConfig
        required: false
      operateVnfOpConfig:
        type: nfv.datatypes.operateVnfOpConfig
        required: false
  
  nfv.datatypes.VNFDf: # нафиг он сдался не оч понятно, пусть будет как дататайп с required: false
    derived_from: tosca.datatypes.Root
    properties:
      flavourId:
        type: string
        required: false
      description:
        type: string
        required: false
      vduProfile:
        type: nfv.datatypes.vduProfile
        required: true
      instantiationLevel:
        type: nfv.datatypes.instantiationLevel
        required: true
      vnfLcmOperationsConfiguration:
      
capability_types:
  nfv.capabilities.intCpd:
    derived_from: tosca.capabilities.network.Bindable

  nfv.capabilities.intVirtualLinkDesc:
    derived_from: tosca.capabilities.network.Linkable
    
  nfv.capabilities.vdu:
    derived_from: tosca.capabilities.Node
    
  nfv.capabilities.vnfExtCpd:
    derived_from: tosca.capabilities.Node
    
relationship_types:
  nfv.relationships.intCpd:
    derived_from: tosca.relationships.network.BindsTo
    valid_target_types: [ nfv.capabilities.intCpd ]
  
  nfv.relationships.intVirtualLinkDesc:
    derived_from: tosca.relationships.network.LinksTo
    valid_target_types: [ nfv.capabilities.intVirtualLinkDesc ]
    
  nfv.relationships.vdu:
    derived_from: tosca.relationships.DependsOn # или HostedOn?
    valid_target_types: [ nfv.capabilities.vdu ]
    
  nfv.relationships.vnfExtCpd:
    derived_from: tosca.relationships.DependsOn
    valid_target_types: [ nfv.capabilities.vnfExtCpd ]
