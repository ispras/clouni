---
tosca.nodes.Compute:
  - parameter: openstack.nodes.Server.properties.name
    value: "{self[name]}"
  - properties:
      meta: openstack.nodes.Server.properties.meta
  - parameter: '{self[buffer][add_host][hostname]}'
    value: '{{{{ host_ip }}}}'
  - parameter: openstack.nodes.FloatingIp.requirements
    value:
      parameter: server
      value: "{self[keyname]}_server"
  - parameter:  openstack.nodes.FloatingIp.interfaces.Prepare.configure.implementation
    value:
    - executor: ansible
      source: set_fact
      parameters:
        host_ip: '{{{{ {self[keyname]}_floating_ip.floating_ip.floating_ip_address }}}}'
      value: temp_value
    - executor: ansible
      source: add_host
      parameters: '{self[buffer][add_host]}'
      value: temp_value
    - executor: ansible
      source: shell
      parameters: 'ssh-keyscan {{{{ host_ip }}}},`dig +short {{{{ host_ip }}}}`'
      value: host_key
    - executor: ansible
      source: known_hosts
      parameters:
        path: ~/.ssh/known_hosts
        name: "{{{{ host_ip }}}}"
        key: "{{{{ host_key.stdout }}}}"
      value: temp_value
  - attributes:
      tosca_name:
        parameter: "{self[name]}"
        value: "{self[value]}"
      private_address:
        - parameter: openstack.nodes.Port.properties.fixed_ips
          value:
            - ip_address: "{self[value]}"
        - parameter: openstack.nodes.Port.requirements.network.node_filter.properties
          value:
            - parameter: id
              value:
                value: network_id
                condition: ip_contains
                facts:
                  - source: os_subnets_facts
                    executor: ansible
                    value: target_objects
                    parameters: {}
                  - source: set_fact
                    executor: ansible
                    parameters:
                      target_objects: "{{{{ target_objects['ansible_facts']['openstack_subnets'] }}}}"
                    value: temp_value
                  - source: set_fact
                    executor: ansible
                    parameters:
                      new_target_objects: "{{{{ [] }}}}"
                    value: tmp_value
                  - source: set_fact
                    parameters:
                      new_target_objects: "{{{{ new_target_objects + [item | combine({{ 'allocation_pool_start': item['allocation_pools'][0]['start'] | default([]), 'allocation_pool_end': item['allocation_pools'][0]['end'] | default([]) }})] }}}}"
                    extra:
                      with_items: "{{{{ target_objects }}}}"
                    value: temp_value
                    executor: ansible
                  - source: set_fact
                    parameters:
                      target_objects: "{{{{ new_target_objects }}}}"
                    value: temp_value
                    executor: ansible
                executor: ansible
                arguments:
                  - allocation_pool_start
                  - allocation_pool_end
                  - "{self[value]}"
        - parameter: openstack.nodes.Port.properties.name
          value: "{self[name]}_port_0"
        - parameter: openstack.nodes.Server.properties.nics
#        - parameter: openstack.nodes.Server.requirements.network
          value:
          - port-name: "{self[name]}_port_0"
      public_address:
        - parameter: openstack.nodes.Server.attributes.auto_ip
          value: false
        - parameter: openstack.nodes.FloatingIp
          value:
            - attributes.floating_ip_address
            - parameter: requirements.network.node_filter.properties
              value:
                - parameter: name
                  value:
                    value: name
                    facts: os_networks_facts.ansible_facts.openstack_networks
                    condition: equals
                    executor: ansible
                    arguments:
                      - id
                      - value: network_id
                        condition: ip_contains
                        facts:
                          - source: os_subnets_facts
                            executor: ansible
                            value: target_objects
                            parameters: {}
                          - source: set_fact
                            executor: ansible
                            parameters:
                              target_objects: "{{{{ target_objects['ansible_facts']['openstack_subnets'] }}}}"
                            value: temp_value
                          - source: set_fact
                            executor: ansible
                            parameters:
                              new_target_objects: "{{{{ [] }}}}"
                            value: tmp_value
                          - source: set_fact
                            parameters:
                              new_target_objects: "{{{{ new_target_objects + [item | combine({{ 'allocation_pool_start': item['allocation_pools'][0]['start'] | default([]), 'allocation_pool_end': item['allocation_pools'][0]['end'] | default([]) }})] }}}}"
                            extra:
                              with_items: "{{{{ target_objects }}}}"
                            value: temp_value
                            executor: ansible
                          - source: set_fact
                            parameters:
                              target_objects: "{{{{ new_target_objects }}}}"
                            value: temp_value
                            executor: ansible
                        executor: ansible
                        arguments:
                          - allocation_pool_start
                          - allocation_pool_end
                          - "{self[value]}"
        - parameter: '{self[buffer][add_host][groups]}'
          value: '{self[keyname]}'
      networks.*.network_name:
        parameter: openstack.nodes.Server.properties.nics
        value:
          - net-name: "{self[value]}"
      networks.*.network_id:
        parameter: openstack.nodes.Server.properties.nics
        value:
          - net-id: "{self[value]}"
      networks.*.addresses:
        parameter: openstack.nodes.Server.requirements.nics.node_filter.properties
        value:
          - parameter: id
            value: network_id
            facts: os_subnets_facts.ansible_facts.openstack_subnets
            executor: ansible
            condition: ip_contains
            arguments:
              - allocation_pool_start
              - allocation_pool_end
              - "{self[value]}"
      ports.*.port_name:
        parameter: openstack.nodes.Server.properties.nics
        value:
          - port-name: "{self[value]}"
      ports.*.port_id:
        parameter: openstack.nodes.Server.properties.nics
        value:
          - port-id: "{self[value]}"
      ports.*.network_id:
        parameter: openstack.nodes.Server.properties.nics
        value:
          - net-id: "{self[value]}"
      ports.*.mac_address:
        parameter: openstack.nodes.Server.requirements.nics.node_filter.properties
        value:
          - parameter: mac_address
            value: "{self[value]}"
      ports.*.addresses:
        parameter: openstack.nodes.Server.requirements.nics.node_filter.properties
        value:
          - parameter: id
            value:
              value: network_id
              facts: os_subnets_facts.ansible_facts.openstack_subnets
              executor: ansible
              condition: ip_contains
              arguments:
                - allocation_pool_start
                - allocation_pool_end
                - "{self[value]}"
    capabilities:
      host.properties.num_cpus:
        parameter: openstack.nodes.Server.requirements.flavor.node_filter.properties
        value:
          - parameter: vcpus
            value: "{self[value]}"
      host.properties.cpu_frequency:
        error: true
        reason: Openstack doesn't support parameter {self[parameter]}
      host.properties.disk_size:
        parameter: openstack.nodes.Server.requirements.flavor.node_filter.properties
        value:
          - parameter: disk
            value:
              source: transform_units
              executor: python
              parameters:
                source_value: "{self[value]}"
                target_unit: GiB
                is_only_numb: true
              value: default_tmp
      host.properties.mem_size:
        parameter: openstack.nodes.Server.requirements.flavor.node_filter.properties
        value:
          - parameter: ram
            value:
              source: transform_units
              executor: python
              parameters:
                source_value: "{self[value]}"
                target_unit: MiB
                is_only_numb: true
              value: default_tmp
      endpoint:
        attributes.ip_address:
          - openstack.nodes.SecurityGroupRule.attributes.remote_ip_prefix
          - parameter: openstack.nodes.SecurityGroup.properties.name
            value: "{self[name]}_security_group"
          - parameter: openstack.nodes.Server.requirements.security_groups
            value: "{self[keyname]}_security_group"
          - parameter: openstack.nodes.SecurityGroupRule.requirements.security_group
            value: "{self[keyname]}_security_group"
          - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][with_sequence]}"
            value: "start=0 end={{{{ [{self[keyname]}_protocols | length, {self[keyname]}_ports | length] | max - 1 }}}} format=%d"
        properties.protocol:
          - parameter: "{self[buffer][endpoint][protocol]}"
            value:
              - "{self[value]}"
          - parameter: openstack.nodes.SecurityGroupRule.attributes.protocol
            value: "{{{{ {self[keyname]}_protocols[item | int] | default(omit) }}}}"
          - parameter: openstack.nodes.SecurityGroupRule.attributes.port_range_min
            value: "{{{{ {self[keyname]}_ports[item | int] | default(omit) }}}}"
          - parameter: openstack.nodes.SecurityGroupRule.attributes.port_range_max
            value: "{{{{ {self[keyname]}_ports[item | int] | default(omit) }}}}"
          - parameter: openstack.nodes.SecurityGroupRule.interfaces.Prepare.preconfigure.implementation
            value:
              - value: "tmp"
                source: set_fact
                executor: ansible
                parameters:
                  "{self[keyname]}_protocols": "{self[buffer][endpoint][protocol]}"
              - value: "tmp"
                source: set_fact
                executor: ansible
                parameters:
                  "{self[keyname]}_ports": "{self[buffer][endpoint][port]}"
        properties.port:
          - parameter: "{self[buffer][endpoint][port]}"
            value:
              - "{self[value]}"
        properties.secure:
          error: true
          reason: Not supported by OpenStack
        properties.url_path:
          error: true
          reason: Not supported by OpenStack
        properties.port_name:
          error: true
          reason: Not supported by OpenStack
        properties.network_name:
          error: true
          reason: Not supported by OpenStack
        properties.initiator.target:
          parameter: openstack.nodes.SecurityGroupRule.attributes.direction
          value: ingress
        properties.initiator.source:
          parameter: openstack.nodes.SecurityGroupRule.attributes.direction
          value: egress
        properties.initiator.peer:
          parameter: openstack.nodes.SecurityGroupRule.attributes.direction
          value: peer
        properties.ports.*.protocol:
          - parameter: "{self[buffer][endpoint][protocol]}"
            value:
              - "{self[value]}"
        properties.ports.*.source:
          - parameter: "{self[buffer][endpoint][port]}"
            value:
              - "{self[value]}"
        properties.ports.*.target:
          - parameter: "{self[buffer][endpoint][port]}"
            value:
              - "{self[value]}"
      os.properties.architecture: "{self[buffer][os][architecture]}"
      os.properties.type:
        - "{self[buffer][os][type]}"
        - parameter: openstack.nodes.Server.requirements.image.node_filter.properties
          value:
            - parameter: name
              value:
                value: name
                facts: os_image_facts.ansible_facts.openstack_image
                executor: ansible
                condition: contains
                arguments:
                  - - name
                    - properties
                  - "{self[buffer][os]}"
        - parameter: '{self[buffer][add_host][ansible_user]}'
          value: '{self[value]}'
#        - parameter: openstack.nodes.Server.interfaces.Prepare.preconfigure.implementation
#          value:
#          - executor: ansible
#            source: lineinfile
#            parameters:
#              insertafter: EOF
#              line: '[{self[keyname]}:vars]'
#              path: 'inventory.yaml'
#            value: temp_value
#          - executor: ansible
#            source: lineinfile
#            parameters:
#              insertafter: EOF
#              line: 'ansible_user={self[value]}'
#              path: 'inventory.yaml'
#            value: temp_value
      os.properties.distribution: "{self[buffer][os][distribution]}"
      os.properties.version: "{self[buffer][os][version]}"
      scalable.properties:
        default_instances:
          - parameter: "{self[extra][ansible][{self[keyname]}_server][with_sequence]}"
            value: "start=1 end={self[value]} format={self[name]}-%d"
          - parameter: openstack.nodes.Server.properties.name
            value: "{{{{ item }}}}"
#        max_instances:
#          error: true
#          reason: Not described in TOSCA Profile YAML v1.0
#        min_instances:
#          error: true
#          reason: Not described in TOSCA Profile YAML v1.0
    requirements.local_storage:
      error: true
      reason: Bad description in TOSCA Profile YAML v1.0
    interfaces: openstack.nodes.Server.interfaces

tosca.nodes.SoftwareComponent:
#  - tosca.nodes.SoftwareComponent
  - requirements: tosca.nodes.SoftwareComponent.requirements
  - requirements.host:
      parameter: tosca.nodes.SoftwareComponent.requirements.host
      value: "{self[value]}_server"
  - attributes: tosca.nodes.SoftwareComponent.attributes
  - properties: tosca.nodes.SoftwareComponent.properties
  - capabilities: tosca.nodes.SoftwareComponent.capabilities
  - interfaces: tosca.nodes.SoftwareComponent.interfaces

tosca.nodes.network.Network:
  - properties:
      network_name:
          - parameter: openstack.nodes.Network.properties.name
            value: "{self[value]}"
          - parameter: openstack.nodes.Subnet.properties.name
            value: "{self[value]}"
          - parameter: openstack.nodes.Subnet.requirements.network_name
            value: "{self[name]}_network"
      network_id:
          parameter: openstack.nodes.Subnet.properties.id
          value: "{self[value]}"
      dhcp_enabled:
          parameter: openstack.nodes.Subnet.properties.enable_dhcp
          value: "{self[value]}"
      physical_network:
          parameter: openstack.nodes.Network.attributes.provider_physical_network
          value: "{self[value]}"
      network_type:
          parameter: openstack.nodes.Network.attributes.provider_network_type
          value: "{self[value]}"
      segmentation_id:
          parameter: openstack.nodes.Network.attributes.provider_segmentation_id
          value: "{self[value]}"
      start_ip:
          parameter: openstack.nodes.Subnet.properties.allocation_pool_start
          value: "{self[value]}"
      end_ip:
          parameter: openstack.nodes.Subnet.properties.allocation_pool_end
          value: "{self[value]}"
      cidr:
          parameter: openstack.nodes.Subnet.properties.cidr
          value: "{self[value]}"
      ip_version:
          parameter: openstack.nodes.Subnet.properties.ip_version
          value: "{self[value]}"
      gateway_ip:
          parameter: openstack.nodes.Subnet.properties.gateway_ip
          value: "{self[value]}"
  - attributes:
      segmentation_id:
          parameter: openstack.nodes.Network.attributes.provider_segmentation_id
          value: "{self[value]}"

tosca.nodes.network.Port:
  - properties:
      ip_address:
        - parameter: openstack.nodes.Port.properties.fixed_ips
          value:
            - ip_address: "{self[value]}"
        - parameter: openstack.nodes.Port.properties.admin_state_up
          value: true
        - parameter: openstack.nodes.Port.properties.port_security_enabled
          value: false
        - parameter: openstack.nodes.Port.properties.name
          value: "{self[value]}"
  - requirements:
    - link:
          parameter: openstack.nodes.Port.requirements.network
          value: "{self[value]}_subnet"

tosca.relationships.DependsOn:
  - requirements: openstack.relationships.DependsOn.requirements
  - attributes: openstack.relationships.DependsOn.attributes
  - properties: openstack.relationships.DependsOn.properties
  - capabilities: openstack.relationships.DependsOn.capabilities
  - interfaces: openstack.relationships.DependsOn.interfaces

tosca.relationships.HostedOn: openstack.relationships.HostedOn
tosca.relationships.ConnectsTo: openstack.relationships.ConnectsTo
tosca.relationships.AttachesTo: openstack.relationships.AttachesTo
tosca.relationships.network.LinksTo: openstack.relationships.network.LinksTo
tosca.relationships.network.BindsTo: openstack.relationships.network.BindsTo
