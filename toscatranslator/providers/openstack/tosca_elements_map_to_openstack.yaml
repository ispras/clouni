---
tosca.nodes.Compute:
  - parameter: openstack.nodes.Keypair.properties.public_key
    value: "\\{\\{ lookup('file', '{self[public_key_path]}') \\}\\}"
  - parameter: openstack.nodes.Keypair.properties.name
    value: '{self[keyname]}_keypair'
  - parameter: openstack.nodes.Server.requirements
    value:
      parameter: key_name
      value:
        node: "{self[keyname]}_keypair"
  - parameter: "{self[extra][ansible][{self[keyname]}_server][with_sequence]}"
    value: "start=1 end=1 format=%d"
  - parameter: "{self[extra][ansible][{self[keyname]}_floating_ip][with_sequence]}"
    value: "start=1 end=1 format=%d"
  - parameter: openstack.nodes.Server.properties.name
    value: "{self[name]}"
  - attributes:
      meta: openstack.nodes.Server.attributes.meta
  - properties:
      meta: openstack.nodes.Server.properties.meta
  - parameter: openstack.nodes.Server.properties.auto_ip
    value: false
  - parameter: openstack.nodes.Server.interfaces.Standard.create
    value:
      implementation: add_host.yaml
      inputs:
        ansible_user: "{self[buffer][add_host][ansible_user]}"
        host_ip: '\\{\\{ host_ip | default([]) + [[ "{self[keyname]}_private_address_" + item, {self[keyname]}_server.results[item | int - 1].server.public_v4 ]] \\}\\}'
        group: "{self[name]}_server_private_address"
  - properties:
      tosca_name:
        parameter: "{self[name]}"
        value: "{self[value]}"
      private_address:
        - parameter: openstack.nodes.Port.properties.fixed_ips
          value:
            - ip_address: "{self[value]}"
        - parameter: "{self[buffer][private_address]}"
          value: "{self[value]}"
        - parameter: openstack.nodes.Port.requirements.network.node_filter.properties
          value:
            - parameter: id
              value:
                value: network_id
                condition: ip_contains
                facts:
                  - source: os_subnets_facts
                    executor: ansible
                    value: target_objects
                    parameters: {}
                  - source: set_fact
                    executor: ansible
                    parameters:
                      target_objects: "\\{\\{ target_objects['ansible_facts']['openstack_subnets'] \\}\\}"
                    value: temp_value
                  - source: set_fact
                    executor: ansible
                    parameters:
                      new_target_objects: "\\{\\{ [] \\}\\}"
                    value: tmp_value
                  - source: set_fact
                    parameters:
                      new_target_objects: "\\{\\{ new_target_objects + [item | combine(\\{ 'allocation_pool_start': item['allocation_pools'][0]['start'] | default([]), 'allocation_pool_end': item['allocation_pools'][0]['end'] | default([]) \\})] \\}\\}"
                    extra:
                      with_items: "\\{\\{ target_objects \\}\\}"
                    value: temp_value
                    executor: ansible
                  - source: set_fact
                    parameters:
                      target_objects: "\\{\\{ new_target_objects \\}\\}"
                    value: temp_value
                    executor: ansible
                executor: ansible
                arguments:
                  - allocation_pool_start
                  - allocation_pool_end
                  - "{self[buffer][private_address]}" # please don't use self[value] in arguments
        - parameter: openstack.nodes.Port.properties.name
          value: "{self[name]}_port_0"
        - parameter: openstack.nodes.Server.properties.nics
          value:
            - port-name: "{self[name]}_port_0"
      public_address:
        - parameter: openstack.nodes.FloatingIp.requirements
          value:
            parameter: server
            value:
              node: "{self[keyname]}_server"
        - parameter: "{self[buffer][public_address]}"
          value: "{self[value]}"
        - parameter: openstack.nodes.FloatingIp
          value:
            - properties.floating_ip_address
            - parameter: requirements.network.node_filter.properties
              value:
                - parameter: name
                  value:
                    value: name
                    facts: os_networks_facts.ansible_facts.openstack_networks
                    condition: equals
                    executor: ansible
                    arguments:
                      - id
                      - value: network_id
                        condition: ip_contains
                        facts:
                          - source: os_subnets_facts
                            executor: ansible
                            value: target_objects
                            parameters: {}
                          - source: set_fact
                            executor: ansible
                            parameters:
                              target_objects: "\\{\\{ target_objects['ansible_facts']['openstack_subnets'] \\}\\}"
                            value: temp_value
                          - source: set_fact
                            executor: ansible
                            parameters:
                              new_target_objects: "\\{\\{ [] \\}\\}"
                            value: tmp_value
                          - source: set_fact
                            parameters:
                              new_target_objects: "\\{\\{ new_target_objects + [item | combine(\\{ 'allocation_pool_start': item['allocation_pools'][0]['start'] | default([]), 'allocation_pool_end': item['allocation_pools'][0]['end'] | default([]) \\})] \\}\\}"
                            extra:
                              with_items: "\\{\\{ target_objects \\}\\}"
                            value: temp_value
                            executor: ansible
                          - source: set_fact
                            parameters:
                              target_objects: "\\{\\{ new_target_objects \\}\\}"
                            value: temp_value
                            executor: ansible
                        executor: ansible
                        arguments:
                          - allocation_pool_start
                          - allocation_pool_end
                          - "{self[buffer][public_address]}" # please don't use self[value] in arguments
        - parameter: openstack.nodes.FloatingIp.interfaces.Standard.create
          value:
            implementation: add_host.yaml
            inputs:
              ansible_user: "{self[buffer][add_host][ansible_user]}"
              host_ip: '\\{\\{ host_ip | default([]) + [[ "{self[keyname]}_public_address_" + item, {self[keyname]}_floating_ip.results[item | int - 1].floating_ip.floating_ip_address ]] \\}\\}'
              group: "{self[name]}_server_public_address"
      networks.*.network_name:
        parameter: openstack.nodes.Server.properties.nics
        value:
          - net-name: "{self[value]}"
      networks.*.network_id:
        parameter: openstack.nodes.Server.properties.nics
        value:
          - net-id: "{self[value]}"
      networks.*.addresses:
        - parameter: "{self[buffer][address]}"
          value: "{self[value]}"
        - parameter: openstack.nodes.Server.requirements.network.node_filter.properties
          value:
            - parameter: id
              value:
                value: network_id
                condition: ip_contains
                facts:
                  - source: os_subnets_facts
                    executor: ansible
                    value: target_objects
                    parameters: {}
                  - source: set_fact
                    executor: ansible
                    parameters:
                      target_objects: "\\{\\{ target_objects['ansible_facts']['openstack_subnets'] \\}\\}"
                    value: temp_value
                  - source: set_fact
                    executor: ansible
                    parameters:
                      new_target_objects: "\\{\\{ [] \\}\\}"
                    value: tmp_value
                  - source: set_fact
                    parameters:
                      new_target_objects: "\\{\\{ new_target_objects + [item | combine(\\{ 'allocation_pool_start': item['allocation_pools'][0]['start'] | default([]), 'allocation_pool_end': item['allocation_pools'][0]['end'] | default([]) \\})] \\}\\}"
                    extra:
                      with_items: "\\{\\{ target_objects \\}\\}"
                    value: temp_value
                    executor: ansible
                  - source: set_fact
                    parameters:
                      target_objects: "\\{\\{ new_target_objects \\}\\}"
                    value: temp_value
                    executor: ansible
                executor: ansible
                arguments:
                  - allocation_pool_start
                  - allocation_pool_end
                  - "{self[buffer][address]}" # please don't use self[value] in arguments
      ports.*.port_name:
        parameter: openstack.nodes.Server.properties.nics
        value:
          - port-name: "{self[value]}"
      ports.*.port_id:
        parameter: openstack.nodes.Server.properties.nics
        value:
          - port-id: "{self[value]}"
      ports.*.network_id:
        parameter: openstack.nodes.Server.properties.nics
        value:
          - net-id: "{self[value]}"
      ports.*.mac_address:
        - parameter: "{self[buffer][mac_address]}"
          value: "{self[value]}"
        - parameter: openstack.nodes.Server.properties.nics
          value:
            - port-id:
                value: id
                facts: os_port_facts.ansible_facts.openstack_ports
                executor: ansible
                condition: equals
                arguments:
                  - mac_address
                  - "{self[buffer][mac_address]}"
      ports.*.addresses:
        - parameter: "{self[buffer][address]}"
          value: "{self[value]}"
        - parameter: openstack.nodes.Server.requirements.network.node_filter.properties
          value:
            - parameter: id
              value:
                value: network_id
                condition: ip_contains
                facts:
                  - source: os_subnets_facts
                    executor: ansible
                    value: target_objects
                    parameters: {}
                  - source: set_fact
                    executor: ansible
                    parameters:
                      target_objects: "\\{\\{ target_objects['ansible_facts']['openstack_subnets'] \\}\\}"
                    value: temp_value
                  - source: set_fact
                    executor: ansible
                    parameters:
                      new_target_objects: "\\{\\{ [] \\}\\}"
                    value: tmp_value
                  - source: set_fact
                    parameters:
                      new_target_objects: "\\{\\{ new_target_objects + [item | combine(\\{ 'allocation_pool_start': item['allocation_pools'][0]['start'] | default([]), 'allocation_pool_end': item['allocation_pools'][0]['end'] | default([]) \\})] \\}\\}"
                    extra:
                      with_items: "\\{\\{ target_objects \\}\\}"
                    value: temp_value
                    executor: ansible
                  - source: set_fact
                    parameters:
                      target_objects: "\\{\\{ new_target_objects \\}\\}"
                    value: temp_value
                    executor: ansible
                executor: ansible
                arguments:
                  - allocation_pool_start
                  - allocation_pool_end
                  - "{self[buffer][address]}" # please don't use self[value] in arguments
    capabilities:
      host.properties.num_cpus:
        parameter: openstack.nodes.Server.requirements.flavor.node_filter.properties
        value:
          - parameter: vcpus
            value: "{self[value]}"
      host.properties.cpu_frequency:
        error: true
        reason: Openstack doesn't support parameter {self[parameter]}
      host.properties.disk_size:
        parameter: openstack.nodes.Server.requirements.flavor.node_filter.properties
        value:
          - parameter: disk
            value:
              source: transform_units
              executor: python
              parameters:
                source_value: "{self[value]}"
                target_unit: GiB
                is_only_numb: true
              value: default_tmp
      host.properties.mem_size:
        parameter: openstack.nodes.Server.requirements.flavor.node_filter.properties
        value:
          - parameter: ram
            value:
              source: transform_units
              executor: python
              parameters:
                source_value: "{self[value]}"
                target_unit: MiB
                is_only_numb: true
              value: default_tmp
      endpoint:
        - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][with_sequence]}"
          value: "start=0 end=\\{\\{ [protocol | length, port | length, initiator | length] | max - 1 \\}\\} format=%d"
        - parameter: openstack.nodes.SecurityGroup.properties.name
          value: "{self[name]}_security_group"
        - parameter: openstack.nodes.Server.requirements.security_groups
          value:
            node: "{self[keyname]}_security_group"
        - parameter: openstack.nodes.SecurityGroupRule.requirements.security_group
          value:
            node: "{self[keyname]}_security_group"
        - properties:
            ip_address:
              - parameter: openstack.nodes.SecurityGroupRule.properties.remote_ip_prefix
                value: "{self[value]}"
            protocol:
              - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][vars][protocol]}"
                value:
                  - "{self[value]}"
              - parameter: openstack.nodes.SecurityGroupRule.properties.protocol
                value: "\\{\\{ protocol[item | int] | default(omit) \\}\\}"
              - parameter: openstack.nodes.SecurityGroupRule.properties.port_range_min
                value: "\\{\\{ port[item | int] | default(omit) \\}\\}"
              - parameter: openstack.nodes.SecurityGroupRule.properties.port_range_max
                value: "\\{\\{ port[item | int] | default(omit) \\}\\}"
              - parameter: openstack.nodes.SecurityGroupRule.properties.direction
                value: "\\{\\{ initiator[item | int] | default(omit) \\}\\}"
            port:
              - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][vars][port]}"
                value:
                  - "{self[value]}"
            secure:
              error: true
              reason: Not supported by OpenStack
            url_path:
              error: true
              reason: Not supported by OpenStack
            port_name:
              error: true
              reason: Not supported by OpenStack
            network_name:
              error: true
              reason: Not supported by OpenStack
            initiator.target:
              - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][vars][initiator]}"
                value:
                  - ingress
            initiator.source:
              - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][vars][initiator]}"
                value:
                  - egress
            initiator.peer:
              error: true
              reason: Not supported by OpenStack
            ports.*.protocol:
              - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][vars][protocol]}"
                value:
                  - "{self[value]}"
            ports.*.source:
              - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][vars][port]}"
                value:
                  - "{self[value]}"
              - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][vars][initiator]}"
                value:
                  - egress
            ports.*.target:
              - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][vars][port]}"
                value:
                  - "{self[value]}"
              - parameter: "{self[extra][ansible][{self[keyname]}_security_group_rule][vars][initiator]}"
                value:
                  - ingress
      os:
        - properties:
            architecture: "{self[buffer][os][architecture]}"
            type:
              - parameter: "{self[buffer][os][type]}"
                value: '{self[value]}'
              - parameter: '{self[buffer][add_host][ansible_user]}'
                value: '{self[value]}'
            distribution:
              - parameter: "{self[buffer][os][distribution]}"
                value: '{self[value]}'
              - parameter: '{self[buffer][add_host][ansible_user]}'
                value: '{self[value]}'
            version: "{self[buffer][os][version]}"
        - parameter: openstack.nodes.Server.requirements.image.node_filter.properties
          value:
            - parameter: name
              value:
                value: name
                facts: os_image_facts.ansible_facts.openstack_image
                executor: ansible
                condition: contains
                arguments:
                  - - name
                    - properties
                  - "{self[buffer][os]}"
      scalable.properties:
        min_instances:
          - parameter: "{self[extra][ansible][{self[keyname]}_server][with_sequence]}"
            value: "start=1 end={self[value]} format=%d"
          - parameter: "{self[extra][ansible][{self[name]}_floating_ip][with_sequence]}"
            value: "start=1 end={self[value]} format=%d"
          - parameter: openstack.nodes.Server.properties.name
            value: "{self[name]}_\\{\\{ item \\}\\}"
        default_instances:
          - parameter: "{self[extra][ansible][{self[keyname]}_server][with_sequence]}"
            value: "start=1 end={self[value]} format=%d"
          - parameter: "{self[extra][ansible][{self[name]}_floating_ip][with_sequence]}"
            value: "start=1 end={self[value]} format=%d"
          - parameter: openstack.nodes.Server.properties.name
            value: "{self[name]}_\\{\\{ item \\}\\}"
        max_instances:
          - parameter: "{self[extra][ansible][{self[keyname]}_server][with_sequence]}"
            value: "start=1 end={self[value]} format=%d"
          - parameter: "{self[extra][ansible][{self[name]}_floating_ip][with_sequence]}"
            value: "start=1 end={self[value]} format=%d"
          - parameter: openstack.nodes.Server.properties.name
            value: "{self[name]}_\\{\\{ item \\}\\}"
    interfaces: openstack.nodes.Server.interfaces
#  - requirements.local_storage.node: TODO: ТАК НАДО
#      parameter: openstack.nodes.Server.requirements
#      value:
#        - parameter: volumes
#          value: "{self[value]}_volume"
    requirements.local_storage.node:
      parameter: openstack.nodes.Server.requirements.volumes
      value: "{self[value]}_volume"

tosca.nodes.BlockStorage:
  - properties:
      size:
        - parameter: openstack.nodes.Volume.properties.size
          value:
            source: transform_units
            executor: python
            parameters:
              source_value: "{self[value]}"
              target_unit: GiB
              is_only_numb: true
              is_floor_to_int: true
            value: default_tmp
  - parameter: openstack.nodes.Volume.properties.display_name
    value: "{self[name]}"

tosca.nodes.network.Network:
  - interfaces: openstack.nodes.Network.interfaces
  - properties:
      network_name:
          - parameter: openstack.nodes.Network.properties.name
            value: "{self[value]}"
          - parameter: openstack.nodes.Subnet.properties.name
            value: "{self[value]}"
          - parameter: openstack.nodes.Subnet.requirements.network_name.node
            value: "{self[name]}_network"
      network_id:
          parameter: openstack.nodes.Subnet.properties.id
          value: "{self[value]}"
      dhcp_enabled:
          parameter: openstack.nodes.Subnet.properties.enable_dhcp
          value: "{self[value]}"
      physical_network:
          parameter: openstack.nodes.Network.properties.provider_physical_network
          value: "{self[value]}"
      network_type:
          parameter: openstack.nodes.Network.properties.provider_network_type
          value: "{self[value]}"
      segmentation_id:
          parameter: openstack.nodes.Network.properties.provider_segmentation_id
          value: "{self[value]}"
      start_ip:
          parameter: openstack.nodes.Subnet.properties.allocation_pool_start
          value: "{self[value]}"
      end_ip:
          parameter: openstack.nodes.Subnet.properties.allocation_pool_end
          value: "{self[value]}"
      cidr:
          parameter: openstack.nodes.Subnet.properties.cidr
          value: "{self[value]}"
      ip_version:
          parameter: openstack.nodes.Subnet.properties.ip_version
          value: "{self[value]}"
      gateway_ip:
          parameter: openstack.nodes.Subnet.properties.gateway_ip
          value: "{self[value]}"

tosca.nodes.network.Port:
  - interfaces: openstack.nodes.Port.interfaces
  - properties:
      ip_address:
        - parameter: openstack.nodes.Port.properties.fixed_ips
          value:
            - ip_address: "{self[value]}"
        - parameter: openstack.nodes.Port.properties.admin_state_up
          value: true
        - parameter: openstack.nodes.Port.properties.port_security_enabled
          value: false
        - parameter: openstack.nodes.Port.properties.name
          value: "{self[value]}"
  - requirements:
    - link.node:
        parameter: openstack.nodes.Port.requirements.network.node
        value: "{self[value]}_subnet"
    - link.relationship:
        parameter: openstack.nodes.Port.requirements.network.relationship
        value: "{self[value]}_links_to"

tosca.nodes.SoftwareComponent:
  - requirements:
    - host.node:
        parameter: tosca.nodes.SoftwareComponent.requirements.host.node
        value: "{self[value]}_server"
    - host.relationship:
        parameter: tosca.nodes.SoftwareComponent.requirements.host.relationship
        value: "{self[value]}_hosted_on"
  - properties: tosca.nodes.SoftwareComponent.properties
  - interfaces: tosca.nodes.SoftwareComponent.interfaces

tosca.relationships.DependsOn:
  - requirements: openstack.relationships.DependsOn.requirements
  - attributes: openstack.relationships.DependsOn.attributes
  - properties: openstack.relationships.DependsOn.properties
  - capabilities: openstack.relationships.DependsOn.capabilities
  - interfaces: openstack.relationships.DependsOn.interfaces

tosca.relationships.HostedOn:
  - requirements: openstack.relationships.HostedOn.requirements
  - attributes: openstack.relationships.HostedOn.attributes
  - properties: openstack.relationships.HostedOn.properties
  - capabilities: openstack.relationships.HostedOn.capabilities
  - interfaces: openstack.relationships.HostedOn.interfaces

tosca.relationships.ConnectsTo:
  - requirements: openstack.relationships.ConnectsTo.requirements
  - attributes: openstack.relationships.ConnectsTo.attributes
  - properties: openstack.relationships.ConnectsTo.properties
  - capabilities: openstack.relationships.ConnectsTo.capabilities
  - interfaces: openstack.relationships.ConnectsTo.interfaces

tosca.relationships.AttachesTo:
  - requirements: openstack.relationships.AttachesTo.requirements
  - attributes: openstack.relationships.AttachesTo.attributes
  - properties: openstack.relationships.AttachesTo.properties
  - capabilities: openstack.relationships.AttachesTo.capabilities
  - interfaces: openstack.relationships.AttachesTo.interfaces

tosca.relationships.RoutesTo:
  - requirements: openstack.relationships.RoutesTo.requirements
  - attributes: openstack.relationships.RoutesTo.attributes
  - properties: openstack.relationships.RoutesTo.properties
  - capabilities: openstack.relationships.RoutesTo.capabilities
  - interfaces: openstack.relationships.RoutesTo.interfaces

tosca.relationships.network.LinksTo:
  - requirements: openstack.relationships.network.LinksTo.requirements
  - attributes: openstack.relationships.network.LinksTo.attributes
  - properties: openstack.relationships.network.LinksTo.properties
  - capabilities: openstack.relationships.network.LinksTo.capabilities
  - interfaces: openstack.relationships.network.LinksTo.interfaces

tosca.relationships.network.BindsTo:
  - requirements: openstack.relationships.network.BindsTo.requirements
  - attributes: openstack.relationships.network.BindsTo.attributes
  - properties: openstack.relationships.network.BindsTo.properties
  - capabilities: openstack.relationships.network.BindsTo.capabilities
  - interfaces: openstack.relationships.network.BindsTo.interfaces