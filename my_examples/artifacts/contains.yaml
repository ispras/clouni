# input_facts and input_args are defined

- name: Initialize input argument argv_0
  set_fact:
    argv_0: "{{ input_args[0] }}"
- name: Initialize input argument argv_1
  set_fact:
    argv_1: "{{ input_args[1] }}"

# Make list from arguments
- set_fact:
    new_argv_0: "{{ [] }}"
  when: argv_0 | type_debug == "dict"

- set_fact:
    argv_0_items: "{{ argv_0|dict2items }}"
  when: argv_0 | type_debug == "dict"

- set_fact:
    argv_0_items: "{{ [] }}"
  when: argv_0 | type_debug != "dict"

- name: Make list from argument argv_0 only values if type is dict
  set_fact:
    new_argv_0: "{{ new_argv_0 + [item.value] }}"
  with_items: "{{ argv_0_items }}"
  when: argv_0 | type_debug == "dict"

- set_fact:
    argv_0: "{{ new_argv_0 }}"
  when: argv_0 | type_debug == 'dict'

- name: Make list from argument argv_0 if type is not dict or list
  set_fact:
    argv_0: "{{ [argv_0] }}"
  when: argv_0 | type_debug != 'list'


- set_fact:
    new_argv_1: "{{ [] }}"
  when: argv_1 | type_debug == 'dict'

- set_fact:
    argv_1_items: "{{ argv_1|dict2items }}"
  when: argv_1 | type_debug == "dict"

- set_fact:
    argv_1_items: "{{ [] }}"
  when: argv_1 | type_debug != "dict"

- name: Make list from argument argv_1 only values if type is dict
  set_fact:
    new_argv_1: "{{ new_argv_1 + [item.value] }}"
  with_items: "{{ argv_1_items }}"
  when: argv_1 | type_debug == 'dict'

- set_fact:
    argv_1: "{{ new_argv_1 }}"
  when: argv_1 | type_debug == 'dict'

- name: Make list from argument argv_0 if type is not dict or list
  set_fact:
    argv_1: "{{ [argv_1] }}"
  when: argv_1 | type_debug != 'list'


# Find the matchable
- name: Initialise index list to iterate facts
  set_fact:
    fact_indexes: "{{ range(0, input_facts | length) | list }}"

- set_fact:
    one_fact_common_value: "{{ {} }}"

- name: Gather joint required values of every fact
  set_fact:
    one_fact_common_value: "{{ one_fact_common_value | combine ({item[0]: one_fact_common_value[item[0]] | default('') + input_facts[item[0]][item[1]] | lower}) }}"
  with_nested:
    - "{{ fact_indexes }}"
    - "{{ argv_0 }}"
  loop_control:
    label: "{{ one_fact_common_value[item[0]] | default('') + input_facts[item[0]][item[1]] | lower }}"

- set_fact:
    fitted_object_numbers: "{{ {} }}"

- name: Initialise parameter which store if the fact is matched
  set_fact:
    fitted_object_numbers: "{{ fitted_object_numbers | combine ({item: True}) }}"
  with_items: "{{ fact_indexes }}"

- name: Check every fact if it matches the condition
  set_fact:
    fitted_object_numbers: "{{ fitted_object_numbers | combine ({item[0]: False}) }}"
  with_nested:
    - "{{ fact_indexes }}"
    - "{{ argv_1 }}"
  when: item[1]|string|lower not in one_fact_common_value[item[0]]
  loop_control:
    label: "{{ item[1]|string|lower, one_fact_common_value[item[0]] }}"

- set_fact:
    matched_objects: "{{ [] }}"

- name: Make list of matched objects
  set_fact:
    matched_objects: "{{ matched_objects + [ input_facts[item] ] }}"
  with_items: "{{ fact_indexes }}"
  when: fitted_object_numbers[item]
  loop_control:
    label: "{{ one_fact_common_value[item] }}"

- debug:
    msg: "WARNING: there are more than one matchable objects: {{ matched_objects }}"
  when: matched_objects | length > 1

- fail:
    msg: "There are no matchable objects"
  when: matched_objects | length == 0

- name: Take one matched object
  set_fact:
    matched_object: "{{ item }}"
  with_items: "{{ matched_objects }}"