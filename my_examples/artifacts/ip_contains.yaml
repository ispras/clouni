# input_facts and input_args are defined

- name: Initialize param_start
  set_fact:
    param_start: "{{ input_args[0] }}"

- name: Initialize param_end
  set_fact:
    param_end: "{{ input_args[1] }}"

- name: Initialize addresses
  set_fact:
    addresses: "{{ input_args[2] }}"

- set_fact:
    ip_addresses: "{{ [] }}"
  when: addresses | type_debug == 'list'

- set_fact:
    addresses_items: "{{ addresses }}"
  when: addresses | type_debug == 'list'

- set_fact:
    addresses_items: "{{ [] }}"
  when: addresses | type_debug != 'list'

- name: Make list of ip_addresses from addresses
  set_fact:
    ip_addresses: "{{ ip_addresses + [item | ipaddr] }}"
  with_items: "{{ addresses_items }}"
  when: addresses | type_debug == 'list'

- name: Make list if addresses not a list
  set_fact:
    ip_addresses: "{{ [ addresses | ipaddr ] }}"
  when: addresses | type_debug != 'list'


# Filter to find matchable

- name: Initialise index list to iterate facts
  set_fact:
    fact_indexes: "{{ range(0, input_facts | length) | list }}"

- set_fact:
    ip_start: "{{ {} }}"

- name: Create list of start ip address range for every fact
  set_fact:
    ip_start: "{{ ip_start | combine({ item: input_facts[item][param_start] | default([]) }) }}"
  with_items: "{{ fact_indexes }}"
  loop_control: 
    label: "{{ { param_start: input_facts[item][param_start] } }}"

- set_fact:
    ip_end: "{{ {} }}"

- name: Create list of end ip address range for every fact
  set_fact:
    ip_end: "{{ ip_end | combine ({ item: input_facts[item][param_end] | default([]) }) }}"
  with_items: "{{ fact_indexes }}"
  loop_control:
    label: "{{ { param_end: input_facts[item][param_end] } }}"

- name: Make ip starts list if not 
  set_fact:
    ip_start: "{{ ip_start | combine ({ item: [ ip_start[item] ] }) }}"
  with_items: "{{ fact_indexes }}"
  when: ip_start[item] | type_debug != 'list'
  loop_control:
    label: "{{ ip_start[item] }}"

- name: Make ip ends list if not 
  set_fact:
    ip_end: "{{ ip_end | combine ({ item: [ip_end[item]] }) }}"
  with_items: "{{ fact_indexes }}"
  when: ip_end[item] | type_debug != 'list'
  loop_control:
    label: "{{ ip_end[item] }}"

- set_fact:
    ip_nums_max: 0

- name: Get maximum number of ip ranges for every fact
  set_fact:
    ip_nums_max: "{{ [[ ip_start[item] | length, ip_end[item] | length ] | min, ip_nums_max | int ] | max }}"
  with_items: "{{ fact_indexes }}"
  loop_control:
    label: "{{ ip_start[item], ip_end[item] }}"

- set_fact:
    fitted_object_numbers: "{{ {} }}"

- name: Initialise parameter which store if the fact is matched
  set_fact:
    fitted_object_numbers: "{{ fitted_object_numbers | combine ({ item: True }) }}"
  with_items: "{{ fact_indexes }}"

- name: Check every fact if it matches the condition
  set_fact:
    fitted_object_numbers: "{{ fitted_object_numbers | combine ({item[0]: False}) }}"
  with_nested:
    - "{{ fact_indexes }}"
    - "{{ range(0, ip_nums_max | int ) | list }}"
    - "{{ ip_addresses }}"
  when:
    - ip_start[item[0]][item[1]] is defined
    - ip_end[item[0]][item[1]] is defined
    - item[2] | ipaddr('int') < ip_start[item[0]][item[1]] | ipaddr('int') or item[2] | ipaddr('int') > ip_end[item[0]][item[1]] | ipaddr('int')
  loop_control: 
    label: "{{ item[2] | ipaddr, [ ip_start[item[0]][item[1]] | default('undefined'),  ip_end[item[0]][item[1]] | default('undefined')] }}"

- set_fact:
    matched_objects: "{{ [] }}"

- name: Make list of matched objects
  set_fact:
    matched_objects: "{{ matched_objects + [ input_facts[item] ] }}"
  with_items: "{{ fact_indexes }}"
  when: fitted_object_numbers[item]
  loop_control:
    label: "{{ ip_start[item], ip_end[item] }}"

- debug:
    msg: "WARNING: there are more than one matchable objects: {{ matched_objects }}"
  when: matched_objects | length > 1

- fail:
    msg: "There are no matchable objects"
  when: matched_objects | length == 0

- name: Take one matched object
  set_fact:
    matched_object: "{{ item }}"
  with_items: "{{ matched_objects }}"